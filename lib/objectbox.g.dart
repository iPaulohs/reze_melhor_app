// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/entities/biblia.dart';
import 'domain/entities/novena.dart';
import 'domain/entities/oracao.dart';
import 'domain/entities/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 978354530695307512),
      name: 'Biblia',
      lastPropertyId: const obx_int.IdUid(3, 3609933219412969673),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 35229122984407765),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7696647299759706750),
            name: 'velhoTestamentoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5837581138182094753),
            relationTarget: 'Testamento'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3609933219412969673),
            name: 'novoTestamentoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4436225505688040395),
            relationTarget: 'Testamento')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2776166888091952450),
      name: 'Capitulo',
      lastPropertyId: const obx_int.IdUid(3, 3250736292200470131),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5218771542444322021),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3250736292200470131),
            name: 'numero',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8296689231686661436),
            name: 'versiculos',
            targetId: const obx_int.IdUid(5, 8396685455678618413))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5353356144790035989),
      name: 'Testamento',
      lastPropertyId: const obx_int.IdUid(2, 427727005206992345),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2387665716135683757),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 427727005206992345),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 4371736052324638455),
            name: 'livros',
            targetId: const obx_int.IdUid(6, 6339586086367043129))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8396685455678618413),
      name: 'Versiculo',
      lastPropertyId: const obx_int.IdUid(3, 8583305453968248019),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7806245502070636438),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5590735662660648335),
            name: 'numero',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8583305453968248019),
            name: 'conteudo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6339586086367043129),
      name: 'Livro',
      lastPropertyId: const obx_int.IdUid(2, 5508764048416290882),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4397438891995134128),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5508764048416290882),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 6494389622508671702),
            name: 'capitulos',
            targetId: const obx_int.IdUid(3, 2776166888091952450))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3299263421545153545),
      name: 'DiaNovena',
      lastPropertyId: const obx_int.IdUid(4, 7662420739981699673),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 541702587598067633),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4527668611710218207),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2896665578295214496),
            name: 'diaNovena',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7662420739981699673),
            name: 'conteudo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 5919184706871978007),
      name: 'Novena',
      lastPropertyId: const obx_int.IdUid(4, 2389174232810510383),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4859025038493146570),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 460263649848607116),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7839055450627731251),
            name: 'titulo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2389174232810510383),
            name: 'subtitulo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 8060589398812255660),
            name: 'dias',
            targetId: const obx_int.IdUid(7, 3299263421545153545))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 4472521707576377095),
      name: 'Oracao',
      lastPropertyId: const obx_int.IdUid(5, 617597145925809941),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8889147685519503141),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8535058728527233250),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 344275403285571728),
            name: 'titulo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2622817718066183667),
            name: 'subtitulo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 617597145925809941),
            name: 'conteudo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 2540859080304930753),
      name: 'UserEntity',
      lastPropertyId: const obx_int.IdUid(9, 6962850854028578542),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1187259869325461198),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7362343529323444886),
            name: 'surname',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5491750762232006577),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6054022767910148120),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7579638603037308659),
            name: 'provedorUid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8520773688030596541),
            name: 'provedorAutenticacao',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9170004141617453966),
            name: 'sexo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(11, 2540859080304930753),
      lastIndexId: const obx_int.IdUid(3, 4436225505688040395),
      lastRelationId: const obx_int.IdUid(5, 8060589398812255660),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [8161291061944171036, 4992877398909705995],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1515708134120394993,
        6261833103580489849,
        1658293469330019822,
        3236633171394263372,
        3725834056642003008,
        4394997633896901442,
        5897502857700167867,
        1197561101072429928,
        1196264737149443132,
        7930550389029674896,
        3473821086113692096,
        3940869466787258654,
        3846499280220443561,
        1351342767349477524,
        215812025469001283,
        5119840961069201754,
        274251187647307504,
        6962850854028578542
      ],
      retiredRelationUids: const [6253594921626277455],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Biblia: obx_int.EntityDefinition<Biblia>(
        model: _entities[0],
        toOneRelations: (Biblia object) =>
            [object.velhoTestamento, object.novoTestamento],
        toManyRelations: (Biblia object) => {},
        getId: (Biblia object) => object.id,
        setId: (Biblia object, int id) {
          object.id = id;
        },
        objectToFB: (Biblia object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.velhoTestamento.targetId);
          fbb.addInt64(2, object.novoTestamento.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Biblia()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.velhoTestamento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.velhoTestamento.attach(store);
          object.novoTestamento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.novoTestamento.attach(store);
          return object;
        }),
    Capitulo: obx_int.EntityDefinition<Capitulo>(
        model: _entities[1],
        toOneRelations: (Capitulo object) => [],
        toManyRelations: (Capitulo object) =>
            {obx_int.RelInfo<Capitulo>.toMany(1, object.id): object.versiculos},
        getId: (Capitulo object) => object.id,
        setId: (Capitulo object, int id) {
          object.id = id;
        },
        objectToFB: (Capitulo object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.numero);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numeroParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Capitulo(numero: numeroParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Capitulo>(object.versiculos,
              store, obx_int.RelInfo<Capitulo>.toMany(1, object.id));
          return object;
        }),
    Testamento: obx_int.EntityDefinition<Testamento>(
        model: _entities[2],
        toOneRelations: (Testamento object) => [],
        toManyRelations: (Testamento object) =>
            {obx_int.RelInfo<Testamento>.toMany(4, object.id): object.livros},
        getId: (Testamento object) => object.id,
        setId: (Testamento object, int id) {
          object.id = id;
        },
        objectToFB: (Testamento object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Testamento(nome: nomeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Testamento>(object.livros,
              store, obx_int.RelInfo<Testamento>.toMany(4, object.id));
          return object;
        }),
    Versiculo: obx_int.EntityDefinition<Versiculo>(
        model: _entities[3],
        toOneRelations: (Versiculo object) => [],
        toManyRelations: (Versiculo object) => {},
        getId: (Versiculo object) => object.id,
        setId: (Versiculo object, int id) {
          object.id = id;
        },
        objectToFB: (Versiculo object, fb.Builder fbb) {
          final conteudoOffset = fbb.writeString(object.conteudo);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.numero);
          fbb.addOffset(2, conteudoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numeroParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final conteudoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Versiculo(numero: numeroParam, conteudo: conteudoParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Livro: obx_int.EntityDefinition<Livro>(
        model: _entities[4],
        toOneRelations: (Livro object) => [],
        toManyRelations: (Livro object) =>
            {obx_int.RelInfo<Livro>.toMany(3, object.id): object.capitulos},
        getId: (Livro object) => object.id,
        setId: (Livro object, int id) {
          object.id = id;
        },
        objectToFB: (Livro object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Livro(nome: nomeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Livro>(object.capitulos,
              store, obx_int.RelInfo<Livro>.toMany(3, object.id));
          return object;
        }),
    DiaNovena: obx_int.EntityDefinition<DiaNovena>(
        model: _entities[5],
        toOneRelations: (DiaNovena object) => [],
        toManyRelations: (DiaNovena object) => {},
        getId: (DiaNovena object) => object.id,
        setId: (DiaNovena object, int id) {
          object.id = id;
        },
        objectToFB: (DiaNovena object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final conteudoOffset = fbb.writeString(object.conteudo);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addInt64(2, object.diaNovena);
          fbb.addOffset(3, conteudoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final diaNovenaParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final conteudoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = DiaNovena(
              uid: uidParam, diaNovena: diaNovenaParam, conteudo: conteudoParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Novena: obx_int.EntityDefinition<Novena>(
        model: _entities[6],
        toOneRelations: (Novena object) => [],
        toManyRelations: (Novena object) =>
            {obx_int.RelInfo<Novena>.toMany(5, object.id): object.dias},
        getId: (Novena object) => object.id,
        setId: (Novena object, int id) {
          object.id = id;
        },
        objectToFB: (Novena object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final tituloOffset = fbb.writeString(object.titulo);
          final subtituloOffset = fbb.writeString(object.subtitulo);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, tituloOffset);
          fbb.addOffset(3, subtituloOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final tituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final subtituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Novena(
              uid: uidParam, titulo: tituloParam, subtitulo: subtituloParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Novena>(
              object.dias, store, obx_int.RelInfo<Novena>.toMany(5, object.id));
          return object;
        }),
    Oracao: obx_int.EntityDefinition<Oracao>(
        model: _entities[7],
        toOneRelations: (Oracao object) => [],
        toManyRelations: (Oracao object) => {},
        getId: (Oracao object) => object.id,
        setId: (Oracao object, int id) {
          object.id = id;
        },
        objectToFB: (Oracao object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final tituloOffset = fbb.writeString(object.titulo);
          final subtituloOffset = object.subtitulo == null
              ? null
              : fbb.writeString(object.subtitulo!);
          final conteudoOffset = fbb.writeString(object.conteudo);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, tituloOffset);
          fbb.addOffset(3, subtituloOffset);
          fbb.addOffset(4, conteudoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final tituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final subtituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final conteudoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Oracao(
              uid: uidParam,
              titulo: tituloParam,
              subtitulo: subtituloParam,
              conteudo: conteudoParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserEntity: obx_int.EntityDefinition<UserEntity>(
        model: _entities[8],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final surnameOffset =
              object.surname == null ? null : fbb.writeString(object.surname!);
          final emailOffset = fbb.writeString(object.email);
          final nameOffset = fbb.writeString(object.name);
          final provedorUidOffset = fbb.writeString(object.provedorUid);
          final provedorAutenticacaoOffset =
              fbb.writeString(object.provedorAutenticacao);
          final sexoOffset =
              object.sexo == null ? null : fbb.writeString(object.sexo!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, surnameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, provedorUidOffset);
          fbb.addOffset(6, provedorAutenticacaoOffset);
          fbb.addOffset(7, sexoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final provedorUidParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final surnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final provedorAutenticacaoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final sexoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = UserEntity(
              provedorUid: provedorUidParam,
              name: nameParam,
              surname: surnameParam,
              email: emailParam,
              provedorAutenticacao: provedorAutenticacaoParam,
              sexo: sexoParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Biblia] entity fields to define ObjectBox queries.
class Biblia_ {
  /// See [Biblia.id].
  static final id =
      obx.QueryIntegerProperty<Biblia>(_entities[0].properties[0]);

  /// See [Biblia.velhoTestamento].
  static final velhoTestamento =
      obx.QueryRelationToOne<Biblia, Testamento>(_entities[0].properties[1]);

  /// See [Biblia.novoTestamento].
  static final novoTestamento =
      obx.QueryRelationToOne<Biblia, Testamento>(_entities[0].properties[2]);
}

/// [Capitulo] entity fields to define ObjectBox queries.
class Capitulo_ {
  /// See [Capitulo.id].
  static final id =
      obx.QueryIntegerProperty<Capitulo>(_entities[1].properties[0]);

  /// See [Capitulo.numero].
  static final numero =
      obx.QueryIntegerProperty<Capitulo>(_entities[1].properties[1]);

  /// see [Capitulo.versiculos]
  static final versiculos =
      obx.QueryRelationToMany<Capitulo, Versiculo>(_entities[1].relations[0]);
}

/// [Testamento] entity fields to define ObjectBox queries.
class Testamento_ {
  /// See [Testamento.id].
  static final id =
      obx.QueryIntegerProperty<Testamento>(_entities[2].properties[0]);

  /// See [Testamento.nome].
  static final nome =
      obx.QueryStringProperty<Testamento>(_entities[2].properties[1]);

  /// see [Testamento.livros]
  static final livros =
      obx.QueryRelationToMany<Testamento, Livro>(_entities[2].relations[0]);
}

/// [Versiculo] entity fields to define ObjectBox queries.
class Versiculo_ {
  /// See [Versiculo.id].
  static final id =
      obx.QueryIntegerProperty<Versiculo>(_entities[3].properties[0]);

  /// See [Versiculo.numero].
  static final numero =
      obx.QueryIntegerProperty<Versiculo>(_entities[3].properties[1]);

  /// See [Versiculo.conteudo].
  static final conteudo =
      obx.QueryStringProperty<Versiculo>(_entities[3].properties[2]);
}

/// [Livro] entity fields to define ObjectBox queries.
class Livro_ {
  /// See [Livro.id].
  static final id = obx.QueryIntegerProperty<Livro>(_entities[4].properties[0]);

  /// See [Livro.nome].
  static final nome =
      obx.QueryStringProperty<Livro>(_entities[4].properties[1]);

  /// see [Livro.capitulos]
  static final capitulos =
      obx.QueryRelationToMany<Livro, Capitulo>(_entities[4].relations[0]);
}

/// [DiaNovena] entity fields to define ObjectBox queries.
class DiaNovena_ {
  /// See [DiaNovena.id].
  static final id =
      obx.QueryIntegerProperty<DiaNovena>(_entities[5].properties[0]);

  /// See [DiaNovena.uid].
  static final uid =
      obx.QueryStringProperty<DiaNovena>(_entities[5].properties[1]);

  /// See [DiaNovena.diaNovena].
  static final diaNovena =
      obx.QueryIntegerProperty<DiaNovena>(_entities[5].properties[2]);

  /// See [DiaNovena.conteudo].
  static final conteudo =
      obx.QueryStringProperty<DiaNovena>(_entities[5].properties[3]);
}

/// [Novena] entity fields to define ObjectBox queries.
class Novena_ {
  /// See [Novena.id].
  static final id =
      obx.QueryIntegerProperty<Novena>(_entities[6].properties[0]);

  /// See [Novena.uid].
  static final uid =
      obx.QueryStringProperty<Novena>(_entities[6].properties[1]);

  /// See [Novena.titulo].
  static final titulo =
      obx.QueryStringProperty<Novena>(_entities[6].properties[2]);

  /// See [Novena.subtitulo].
  static final subtitulo =
      obx.QueryStringProperty<Novena>(_entities[6].properties[3]);

  /// see [Novena.dias]
  static final dias =
      obx.QueryRelationToMany<Novena, DiaNovena>(_entities[6].relations[0]);
}

/// [Oracao] entity fields to define ObjectBox queries.
class Oracao_ {
  /// See [Oracao.id].
  static final id =
      obx.QueryIntegerProperty<Oracao>(_entities[7].properties[0]);

  /// See [Oracao.uid].
  static final uid =
      obx.QueryStringProperty<Oracao>(_entities[7].properties[1]);

  /// See [Oracao.titulo].
  static final titulo =
      obx.QueryStringProperty<Oracao>(_entities[7].properties[2]);

  /// See [Oracao.subtitulo].
  static final subtitulo =
      obx.QueryStringProperty<Oracao>(_entities[7].properties[3]);

  /// See [Oracao.conteudo].
  static final conteudo =
      obx.QueryStringProperty<Oracao>(_entities[7].properties[4]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// See [UserEntity.id].
  static final id =
      obx.QueryIntegerProperty<UserEntity>(_entities[8].properties[0]);

  /// See [UserEntity.surname].
  static final surname =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[1]);

  /// See [UserEntity.email].
  static final email =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[2]);

  /// See [UserEntity.name].
  static final name =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[3]);

  /// See [UserEntity.provedorUid].
  static final provedorUid =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[4]);

  /// See [UserEntity.provedorAutenticacao].
  static final provedorAutenticacao =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[5]);

  /// See [UserEntity.sexo].
  static final sexo =
      obx.QueryStringProperty<UserEntity>(_entities[8].properties[6]);
}
